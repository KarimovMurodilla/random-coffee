import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart

from loader import dp, db
from states.generic import Reg
from keyboards.inline import inline_buttons
from keyboards.default import keyboard_buttons


@dp.message_handler(state=Reg.check_name)
async def process_check_name(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω–æ':
        async with state.proxy() as data:
            data['name'] = message.from_user.first_name


        msg = await message.answer('„Ö§', reply_markup=types.ReplyKeyboardRemove())
        await msg.delete()

        user_id = message.from_user.id
        text = "–°–ª–∞–≤–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –ü–æ–∫–∞ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä. –ù–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ üòâ"
        await message.answer(text, reply_markup=inline_buttons.show_countries(user_id))
        await Reg.get_country.set()


    elif message.text == '–ò—Å–ø—Ä–∞–≤–∏—Ç—å':
        text = "–£–ø—Å, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –≤–µ—Ä–Ω–æ–µ –∏–º—è"
        await message.answer(text)
        await Reg.change_name.set()


@dp.message_handler(state=Reg.change_name)
async def process_change_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    user_id = message.from_user.id
    text = "–°–ª–∞–≤–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –ü–æ–∫–∞ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä. –ù–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ üòâ"
    await message.answer(text, reply_markup=inline_buttons.show_countries(user_id))
    await Reg.next()


@dp.callback_query_handler(state=Reg.get_country)
async def process_get_country(c: types.CallbackQuery, state: FSMContext):
    country = c.data
    user_id = c.from_user.id
    
    if country == 'done':
        if db.get_selected_countries(user_id):
            await c.message.answer("–Ø –Ω–µ –±—É–¥—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–±–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –∞ –≤–æ—Ç —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è. –í–≤–µ–¥–∏ –µ–≥–æ –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 21.")
            await Reg.get_age.set()
        else:
            await c.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥!")

    else:
        country_data = db.get_country(user_id, country)

        if country_data:
            db.del_country(user_id, country)
            await c.message.edit_reply_markup(inline_buttons.show_countries(user_id))
        
        else:
            async with state.proxy() as data:
                data['country'] = country   

            await c.message.edit_text("–ï—â—ë –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–º —Ç—ã –≥–æ—Ä–æ–¥–µ. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á, –Ω–∞–ø—Ä–∏–º–µ—Ä",
                reply_markup=inline_buttons.show_places(country, user_id)
            )
            await Reg.next()


@dp.callback_query_handler(state=Reg.get_place)
async def process_get_place(c: types.CallbackQuery, state: FSMContext):
    country = c.data
    user_id = c.from_user.id

    if country == 'back':
        text = "–°–ª–∞–≤–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –ü–æ–∫–∞ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä. –ù–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ üòâ"
        await c.message.edit_text(text, reply_markup=inline_buttons.show_countries(user_id))
        await Reg.previous()
    
    elif country == '–î–†–£–ì–û–ï':
        await c.message.answer("–î–∞ –ª–∞–¥–Ω–æ! –ß—Ç–æ —è –ø—Ä–æ–ø—É—Å—Ç–∏–ª? –û–∫–µ–π, –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ. –ü—Ä–∏–º–µ—Ä: –≠–π–ª–∞—Ç")
        await Reg.get_place_by_hand.set()

    else:
        async with state.proxy() as data:
            ctry = data.get('country')

        response = inline_buttons.places.get(ctry) if inline_buttons.places.get(ctry) else ''
        if c.data in response:
            if not db.get_place(user_id, c.data):
                db.reg_country(user_id=user_id, country=ctry, place=c.data)
            else:
                db.del_place(user_id, c.data)
                
            await c.message.edit_reply_markup(inline_buttons.show_places(ctry, user_id))


@dp.message_handler(state=Reg.get_place_by_hand)
async def process_get_place_by_hand(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    place = message.text

    async with state.proxy() as data:
        country = data['country']


    db.reg_country(user_id=user_id, country=country, place=place)
    
    await message.answer("–Ø –Ω–µ –±—É–¥—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–±–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –∞ –≤–æ—Ç —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è. –í–≤–µ–¥–∏ –µ–≥–æ –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 21.")
    await Reg.get_age.set()


@dp.message_handler(state=Reg.get_age)
async def process_get_age(message: types.Message, state: FSMContext):
    age = message.text

    if age.isdigit():
        async with state.proxy() as data:
            data['age'] = int(age)
        await message.answer("–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?", reply_markup=keyboard_buttons.show_jobs())
        await Reg.next()
    
    else:
        await message.answer("–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")
    

@dp.message_handler(state=Reg.get_job)
async def process_get_job(message: types.Message, state: FSMContext):
    job = message.text
    user_id = message.from_user.id

    if job == '–ë–õ–û–ì–ï–†':
        await message.answer("–¢—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ù–ê–•–õ–ï–ë–ù–ò–ö. –¢–æ–ª—å–∫–æ –Ω–µ –æ–±–∏–∂–∞–π—Å—è, —Å–µ–≥–æ–¥–Ω—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –º–µ—Ä–∫—É—Ä–∏–π", reply_markup=types.ReplyKeyboardRemove())

    elif job == '–ù–ê–•–õ–ï–ë–ù–ò–ö':
        await message.answer("–¢—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ë–õ–û–ì–ï–†. –¢–æ–ª—å–∫–æ –Ω–µ –æ–±–∏–∂–∞–π—Å—è, —Å–µ–≥–æ–¥–Ω—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –º–µ—Ä–∫—É—Ä–∏–π", reply_markup=types.ReplyKeyboardRemove())

    elif job == 'Avon':
        await message.answer("–°–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ, —Ç–µ–±—è –º–∞–º–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç? –õ–∞–¥–Ω–æ, –Ω–µ –æ—Ç–≤–µ—á–∞–π!", reply_markup=types.ReplyKeyboardRemove())

    msg = await message.answer('„Ö§', reply_markup=types.ReplyKeyboardRemove())
    await msg.delete()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ.", reply_markup=inline_buttons.show_spheres(user_id))
    await Reg.next()


@dp.callback_query_handler(state=Reg.get_sphere)
async def process_get_sphere(c: types.CallbackQuery, state: FSMContext):
    sphere = c.data
    user_id = c.from_user.id

    if sphere == '–î–†–£–ì–û–ï':
        await c.message.answer("–ß—Ç–æ —è —É–ø—É—Å—Ç–∏–ª? –ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ø–æ—Ä—Ç")
        await Reg.get_sphere_by_hand.set()
    
    elif sphere == 'done':
        await c.message.answer("–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ, —Ö–æ—Ç—è, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–≥–Ω–æ–≤–µ–Ω–∏—è –∏–º–µ—é—Ç –ø—Ä–∏–≤–∫—É—Å –≤–µ—á–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ.", 
            reply_markup=inline_buttons.show_emojis(user_id)
        )
        await Reg.get_emoji.set()

    else:
        async with state.proxy() as data:
            data['main_sphere'] = sphere
        await c.message.edit_text("–ù—É-–∫–∞ —É—Ç–æ—á–Ω–∏, –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ:", reply_markup=inline_buttons.show_more_spheres(user_id, sphere))
        await Reg.next()


@dp.callback_query_handler(state=Reg.get_more_spheres)
async def process_get_more_spheres(c: types.CallbackQuery, state: FSMContext):
    sphere = c.data
    user_id = c.from_user.id

    async with state.proxy() as data:
        main_sphere = data['main_sphere']

    response = inline_buttons.show_more_spheres(user_id, main_sphere, sphere)

    if sphere == '–î–†–£–ì–û–ï':
        await Reg.other_in_search.set()
        await c.message.answer(response)    

    elif sphere == 'back':
        await c.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ.", reply_markup=inline_buttons.show_spheres(user_id))
        await Reg.previous()
    
    else:
        if not db.get_direction(user_id, c.data):
            db.reg_sphere(user_id=user_id, sphere_name=main_sphere, direction_name=c.data)

            if response:
                await c.message.answer(response)    
        else:
            db.del_direction(user_id, c.data)
        await c.message.edit_reply_markup(reply_markup=inline_buttons.show_more_spheres(user_id, main_sphere))
        

@dp.message_handler(state=Reg.get_sphere_by_hand)
async def process_get_sphere_by_hand(message: types.Message, state: FSMContext):
    sphere = message.text
    user_id = message.from_user.id

    async with state.proxy() as data:
        data['main_sphere'] = sphere

    db.reg_sphere(user_id=user_id, sphere_name=sphere, direction_name=sphere)

    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ, —Ö–æ—Ç—è, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–≥–Ω–æ–≤–µ–Ω–∏—è –∏–º–µ—é—Ç –ø—Ä–∏–≤–∫—É—Å –≤–µ—á–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ.", 
        reply_markup=inline_buttons.show_emojis(user_id)
    )
    await Reg.get_emoji.set() 


@dp.message_handler(state=Reg.other_in_search)
async def process_in_search(message: types.Message, state: FSMContext):
    direction = message.text
    user_id = message.from_user.id

    async with state.proxy() as data:
        main_sphere = data['main_sphere']
    
    db.reg_sphere(user_id=user_id, sphere_name=main_sphere, direction_name=direction)

    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ, —Ö–æ—Ç—è, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–≥–Ω–æ–≤–µ–Ω–∏—è –∏–º–µ—é—Ç –ø—Ä–∏–≤–∫—É—Å –≤–µ—á–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ.", 
        reply_markup=inline_buttons.show_emojis(user_id)
    )
    await Reg.next()


@dp.callback_query_handler(state=Reg.get_emoji)
async def process_get_emoji(c: types.CallbackQuery, state: FSMContext):
    emoji = c.data
    user = c.from_user

    description = inline_buttons.show_emojis(user.id, emoji)
    await c.answer(description, show_alert=True)

    if emoji == 'done':
        await c.message.answer(
            '–ó–Ω–∞–µ—à—å, —è –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ–Ω—è–ª –æ–¥–Ω—É –≤–µ—â—å‚Ä¶ –Ø —É–∂–µ —Å—Ç–æ–ª—å–∫–æ –∑–Ω–∞—é –æ —Ç–µ–±–µ. –ú—ã –∫–∞–∫ —Å–µ–º—å—è, '
            '—è ‚Äî –¥–≤–æ—é—Ä–æ–¥–Ω—ã–π –¥—è–¥—è —Å –ø—Ä–∏—á—É–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –∂–∏–≤—ë—Ç –≤ —Ö–∏–∂–∏–Ω–µ —á—É–¥–µ—Å –∏ –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã '
            '—É–∑–Ω–∞–ª —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è ü´Ä   –¢—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Ö–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å –º–µ–Ω—è —Å–æ —Å–≤–æ–∏–º–∏ '
            '–¥—Ä—É–∑—å—è–º–∏. –¢–∞–∫ –Ω–µ —Ä–æ–±–µ–π, –ø—Ä–∏—à–ª–∏ –∏–º —Å—Å—ã–ª–∫—É –∏ —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –º—ã —Å–±–ª–∏–∑–∏–ª–∏—Å—å –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è.',
                reply_markup=inline_buttons.share()
        )

        await asyncio.sleep(2)

        await c.message.answer("–ú—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –î–∞–≤–∞–π —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –º–µ–Ω—é")
        await c.message.answer(
            "<b>–ü–†–û–§–ò–õ–¨</b> ‚Äî –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –Ω–∞–º–µ–∫–∞—é, –Ω–æ –∑–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ. –î–æ–ø—É—Å—Ç–∏–º, —Å–∫—Ä—ã–≤–∞—è—Å—å –æ—Ç –ø–æ–≤–µ—Å—Ç–∫–∏.\n\n"
            "<b>–ü–û–î–î–ï–†–ñ–ö–ê</b> ‚Äî –¥–ª—è —Å–≤—è–∑–∏ —Å –ù–ò–ú, —Å –µ–≥–æ —Å–≤–µ—Ç–ª–æ—Å—Ç—å—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º\n\n"
            "<b>–ù–ê–°–¢–†–û–ô–ö–ê</b> ‚Äî —Ç—ã, –∫–æ–Ω–µ—á–Ω–æ, —Å–º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ –ò–ú –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–æ –Ω—É–∂–Ω–æ –ª–∏ —Ç–µ–±–µ —ç—Ç–æ?\n\n"
            "<a href='https://one-click.site/'>one-click</a> ‚Äî —à–∏–∫–∞—Ä–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –ö–æ–∑—ã—Ä–Ω—É—Ç—å –Ω–∞–≤—ã–∫–∞–º–∏, —Ç–∞–∫ —Å–∫–∞–∑–∞—Ç—å. –ê –∏–º–µ–Ω–Ω–æ –∑–∞–∏–º–µ—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ –ø–æ —Ü–µ–Ω–µ –±–æ–ª—å—à–æ–≥–æ –ª–∞—Ç—Ç–µ —Å –æ—Ä–µ—Ö–æ–≤—ã–º —Ç–æ–ø–∏–Ω–≥–æ–º.",
                disable_web_page_preview=True,
                reply_markup=keyboard_buttons.main_menu()
        )

        async with state.proxy() as data:
            name = data.get('name') if data.get('name') else user.first_name
            age = data.get('age')

        db.reg_user(user.id, user.username, name, age)

        await state.finish()
    
    else:
        if not db.get_emoji(user.id, emoji):
            db.reg_emoji(user.id, emoji)
        
        else:
            db.del_emoji(user.id, emoji)
        
        await c.message.edit_reply_markup(reply_markup=inline_buttons.show_emojis(user.id))
