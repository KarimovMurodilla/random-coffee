import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp, db
from keyboards.default import keyboard_buttons
from keyboards.inline import inline_buttons
from states.generic import Questions, NoQuestions


# If user have a questions
@dp.message_handler(state=Questions.step1)
async def process_questions(message: types.Message):
    text = message.text

    if text == "–ü—Ä–æ–ø—É—â—É":
        msg = await message.answer('„Ö§', reply_markup=types.ReplyKeyboardRemove())
        await msg.delete()

        await message.answer("–ù—É –≤–æ—Ç, –º—ã –∂–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏. –ö–æ–≥–¥–∞ —è —Å–º–æ–≥—É —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ?",
            reply_markup = inline_buttons.date_btns()
        )
        await Questions.next()

    elif text == "–ü–æ–µ—Ö–∞–ª–∏":
        await message.answer("–£–∂–µ –≤ —Å—Ä–µ–¥—É —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –Ω–∏–º –æ –≤—Å—Ç—Ä–µ—á–µ.")
        await NoQuestions.step2.set()


@dp.callback_query_handler(state=Questions.step2)
async def get_next_notification_date(c: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['next_date'] = c.data
    
    await c.message.delete()
    await c.message.answer("–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏!")
    await state.finish()


# If user haven't any questions
@dp.message_handler(text="–ü–æ–µ—Ö–∞–ª–∏", state=NoQuestions.step1)
async def process_no_questions(message: types.Message, state: FSMContext):
    await message.answer("–£–∂–µ –≤ —Å—Ä–µ–¥—É —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –Ω–∏–º –æ –≤—Å—Ç—Ä–µ—á–µ.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    await asyncio.sleep(1)
    msg = await message.answer("3")
    
    for i in range(2, -1, -1):
        i = 'üöÄ' if i == 0 else i        
        await asyncio.sleep(2)
        await msg.edit_text(str(i))

    await asyncio.sleep(1)
    await message.answer("–¢–æ–ª—å–∫–æ –Ω–µ –¥—É–º–∞–π, —á—Ç–æ –º—ã —Å–µ–π—á–∞—Å –∫—É–¥–∞-—Ç–æ –ø–æ–ª–µ—Ç–∏–º. –Ø –∂–µ —Å–∫–∞–∑–∞–ª, –∂–¥–∏ —Å—Ä–µ–¥—ã. –ü—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")