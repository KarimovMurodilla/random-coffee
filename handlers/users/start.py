from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart

from loader import dp, db
from states.reg import Reg
from keyboards.inline import inline_buttons
from keyboards.default import keyboard_buttons


@dp.message_handler(CommandStart(), state='*')
async def bot_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(f"–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –¢–≤–æ—ë –∏–º—è {message.from_user.first_name}",
        reply_markup=keyboard_buttons.check_name()
    )
    await Reg.check_name.set()


@dp.message_handler(state=Reg.check_name)
async def process_check_name(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω–æ':
        async with state.proxy() as data:
            data['name'] = message.from_user.first_name


        msg = await message.answer('„Ö§', reply_markup=types.ReplyKeyboardRemove())
        await msg.delete()

        user_id = message.from_user.id
        text = "–°–ª–∞–≤–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –ü–æ–∫–∞ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä. –ù–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ üòâ"
        await message.answer(text, reply_markup=inline_buttons.show_countries(user_id))
        await Reg.get_country.set()


    elif message.text == '–ò—Å–ø—Ä–∞–≤–∏—Ç—å':
        text = "–£–ø—Å, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –≤–µ—Ä–Ω–æ–µ –∏–º—è"
        await message.answer(text)
        await Reg.change_name.set()


@dp.message_handler(state=Reg.change_name)
async def process_change_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    user_id = message.from_user.id
    text = "–°–ª–∞–≤–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –ü–æ–∫–∞ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä. –ù–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ üòâ"
    await message.answer(text, reply_markup=inline_buttons.show_countries(user_id))
    await Reg.next()


@dp.callback_query_handler(state=Reg.get_country)
async def process_get_country(c: types.CallbackQuery, state: FSMContext):
    country = c.data
    user_id = c.from_user.id

    await c.message.answer("–ï—â—ë –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–º —Ç—ã –≥–æ—Ä–æ–¥–µ. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á, –Ω–∞–ø—Ä–∏–º–µ—Ä",
        reply_markup=inline_buttons.show_places(country, user_id)
    )
    await Reg.next()


@dp.callback_query_handler(state=Reg.get_place)
async def process_get_country(c: types.CallbackQuery, state: FSMContext):
    place = c.data
    user_id = c.from_user.id

    if place == '–î–†–£–ì–û–ï':
        await c.message.answer("–î–∞ –ª–∞–¥–Ω–æ! –ß—Ç–æ —è –ø—Ä–æ–ø—É—Å—Ç–∏–ª? –û–∫–µ–π, –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ. –ü—Ä–∏–º–µ—Ä: –≠–π–ª–∞—Ç")
        await Reg.get_place_by_hand.set()
    
    else:
        await c.message.answer("–Ø –Ω–µ –±—É–¥—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–±–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –∞ –≤–æ—Ç —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è. –í–≤–µ–¥–∏ –µ–≥–æ –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 21.")
        await Reg.get_age.set()



@dp.message_handler(state=Reg.get_place_by_hand)
async def process_get_place_by_hand(message: types.Message, state: FSMContext):
    place = message.text

    await message.answer("–î–∞ –ª–∞–¥–Ω–æ! –ß—Ç–æ —è –ø—Ä–æ–ø—É—Å—Ç–∏–ª? –û–∫–µ–π, –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ. –ü—Ä–∏–º–µ—Ä: –≠–π–ª–∞—Ç")
    await Reg.get_age.set()


@dp.message_handler(state=Reg.get_age)
async def process_get_age(message: types.Message, state: FSMContext):
    age = message.text

    if age.isdigit():
        await message.answer("–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?", reply_markup=keyboard_buttons.show_jobs())
        await Reg.next()
    
    else:
        await message.answer("–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")
    

@dp.message_handler(state=Reg.get_job)
async def process_get_job(message: types.Message, state: FSMContext):
    job = message.text
    user_id = message.from_user.id

    if job == '–ë–õ–û–ì–ï–†':
        await message.answer("–¢—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ù–ê–•–õ–ï–ë–ù–ò–ö. –¢–æ–ª—å–∫–æ –Ω–µ –æ–±–∏–∂–∞–π—Å—è, —Å–µ–≥–æ–¥–Ω—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –º–µ—Ä–∫—É—Ä–∏–π")

    elif job == '–ù–ê–•–õ–ï–ë–ù–ò–ö':
        await message.answer("–¢—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ë–õ–û–ì–ï–†. –¢–æ–ª—å–∫–æ –Ω–µ –æ–±–∏–∂–∞–π—Å—è, —Å–µ–≥–æ–¥–Ω—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –º–µ—Ä–∫—É—Ä–∏–π")

    elif job == 'Avon':
        await message.answer("–°–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ, —Ç–µ–±—è –º–∞–º–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç? –õ–∞–¥–Ω–æ, –Ω–µ –æ—Ç–≤–µ—á–∞–π!")


    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ.", reply_markup=inline_buttons.show_spheres(user_id))
    await Reg.next()


@dp.callback_query_handler(state=Reg.get_sphere)
async def process_get_country(c: types.CallbackQuery, state: FSMContext):
    sphere = c.data
    user_id = c.from_user.id

    await c.message.answer("–ù—É-–∫–∞ —É—Ç–æ—á–Ω–∏, –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ:", reply_markup=inline_buttons.show_more_spheres(user_id, sphere))